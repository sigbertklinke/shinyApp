% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PlotOutput.R
\name{PlotOutput}
\alias{PlotOutput}
\title{plotOut}
\usage{
PlotOutput(app, outputId, width = "100\%", height = "400px",
  click = NULL, dblclick = NULL, hover = NULL, hoverDelay = NULL,
  hoverDelayType = NULL, brush = NULL, clickId = NULL,
  hoverId = NULL, inline = FALSE, file = NULL, text = NULL)
}
\arguments{
\item{app}{a ShinyApp object}

\item{outputId}{output variable to read the plot/image from.}

\item{width}{Image width/height. Must be a valid CSS unit (like
\code{"100\%"}, \code{"400px"}, \code{"auto"}) or a number, which will be
coerced to a string and have \code{"px"} appended. These two arguments are
ignored when \code{inline = TRUE}, in which case the width/height of a plot
must be specified in \code{renderPlot()}. Note that, for height, using
\code{"auto"} or \code{"100\%"} generally will not work as expected,
because of how height is computed with HTML/CSS.}

\item{height}{Image width/height. Must be a valid CSS unit (like
\code{"100\%"}, \code{"400px"}, \code{"auto"}) or a number, which will be
coerced to a string and have \code{"px"} appended. These two arguments are
ignored when \code{inline = TRUE}, in which case the width/height of a plot
must be specified in \code{renderPlot()}. Note that, for height, using
\code{"auto"} or \code{"100\%"} generally will not work as expected,
because of how height is computed with HTML/CSS.}

\item{click}{This can be \code{NULL} (the default), a string, or an object
created by the \code{\link{clickOpts}} function. If you use a value like
\code{"plot_click"} (or equivalently, \code{clickOpts(id="plot_click")}),
the plot will send coordinates to the server whenever it is clicked, and
the value will be accessible via \code{input$plot_click}. The value will be
a named list  with \code{x} and \code{y} elements indicating the mouse
position.}

\item{dblclick}{This is just like the \code{click} argument, but for
double-click events.}

\item{hover}{Similar to the \code{click} argument, this can be \code{NULL}
(the default), a string, or an object created by the
\code{\link{hoverOpts}} function. If you use a value like
\code{"plot_hover"} (or equivalently, \code{hoverOpts(id="plot_hover")}),
the plot will send coordinates to the server pauses on the plot, and the
value will be accessible via \code{input$plot_hover}. The value will be a
named list with \code{x} and \code{y} elements indicating the mouse
position. To control the hover time or hover delay type, you must use
\code{\link{hoverOpts}}.}

\item{hoverDelay}{Deprecated; use \code{hover} instead. Also see the
\code{\link{hoverOpts}} function.}

\item{hoverDelayType}{Deprecated; use \code{hover} instead. Also see the
\code{\link{hoverOpts}} function.}

\item{brush}{Similar to the \code{click} argument, this can be \code{NULL}
(the default), a string, or an object created by the
\code{\link{brushOpts}} function. If you use a value like
\code{"plot_brush"} (or equivalently, \code{brushOpts(id="plot_brush")}),
the plot will allow the user to "brush" in the plotting area, and will send
information about the brushed area to the server, and the value will be
accessible via \code{input$plot_brush}. Brushing means that the user will
be able to draw a rectangle in the plotting area and drag it around. The
value will be a named list with \code{xmin}, \code{xmax}, \code{ymin}, and
\code{ymax} elements indicating the brush area. To control the brush
behavior, use \code{\link{brushOpts}}. Multiple
\code{imageOutput}/\code{plotOutput} calls may share the same \code{id}
value; brushing one image or plot will cause any other brushes with the
same \code{id} to disappear.}

\item{clickId}{Deprecated; use \code{click} instead. Also see the
\code{\link{clickOpts}} function.}

\item{hoverId}{Deprecated; use \code{hover} instead. Also see the
\code{\link{hoverOpts}} function.}

\item{inline}{use an inline (\code{span()}) or block container (\code{div()})
for the output}

\item{file}{character: name of file with R code to execute}

\item{text}{character: text with R code to execute}
}
\value{
an updated ShinyApp object
}
\description{
Render a plot within an application page. 
Either \code{file} or \code{text} must be set.
}
\examples{
\dontrun{ShinyApp() \%>\% PlotOutput('plot', text='plot(runif(10), runif(10))' }
}
